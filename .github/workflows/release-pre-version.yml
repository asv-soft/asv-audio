name: Build and Publish Pre-Release Version

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc"

env:
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
  GITHUB_PACKAGES_URL: 'https://nuget.pkg.github.com/asv-soft/index.json'
  PROPS_VERSION_VAR_NAME: 'ProductVersion'
  GH_TOKEN: ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }}
  USER_NAME: ${{ secrets.USER_NAME }}
  NUGET_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Add NuGet source
        run: dotnet nuget add source ${{ env.GITHUB_PACKAGES_URL }} \--username '${{ env.USER_NAME }}' \--password '${{ env.GH_TOKEN }}' \--store-password-in-clear-text

      - name: Install dependencies
        run: dotnet restore ./src

      - name: Build
        run: dotnet build ./src/Asv.Audio.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ./src/Asv.Audio.sln --no-restore --filter FullyQualifiedName~Asv.Audio.Test

      - name: Set version variable
        env:
          TAG: ${{ github.ref_name }}
        run: echo "VERSION=${TAG#v}" >> $GITHUB_ENV

      - name: Read version from Directory.Build.props
        id: read-version
        run: |
          version=$(grep -oP '<${{env.PROPS_VERSION_VAR_NAME}}>\K[^<]+' ./src/Directory.Build.props)
          echo "PropsVersion=${version}" >> $GITHUB_ENV

      - name: Compare tag with NuGet package version
        run: |
          if [ "${{ env.PropsVersion }}" != "${{ env.VERSION }}" ]; then
            echo "Error: Tag does not match NuGet package version"
            exit 1
          fi

      - name: Pack package
        run: |
          dotnet pack ./src/Asv.Audio/Asv.Audio.csproj -c Release /p:Version=${{ env.VERSION }} --no-build -o .
          dotnet pack ./src/Asv.Audio.Codec.Opus/Asv.Audio.Codec.Opus.csproj -c Release /p:Version=${{ env.VERSION }} --no-build -o .
          dotnet pack ./src/Asv.Audio.Source.Windows/Asv.Audio.Source.Windows.csproj -c Release /p:Version=${{ env.VERSION }} --no-build -o .

      - name: List output files
        run: ls -la

      - name: Push package to GitHub
        run: |
          dotnet nuget push Asv.Audio.${{ env.VERSION }}.nupkg --api-key ${{ env.GH_TOKEN }} --skip-duplicate --source ${{ env.GITHUB_PACKAGES_URL }} --prerelease
          dotnet nuget push Asv.Audio.Codec.Opus.${{ env.VERSION }}.nupkg --api-key ${{ env.GH_TOKEN }} --skip-duplicate --source ${{ env.GITHUB_PACKAGES_URL }} --prerelease
          dotnet nuget push Asv.Audio.Source.Windows.${{ env.VERSION }}.nupkg --api-key ${{ env.GH_TOKEN }} --skip-duplicate --source ${{ env.GITHUB_PACKAGES_URL }} --prerelease

      - name: Push package to Nuget
        run: |
          dotnet nuget push Asv.Audio.${{ env.VERSION }}.nupkg --api-key ${{ env.NUGET_TOKEN }} --skip-duplicate --source ${{ env.NUGET_SOURCE_URL }} --prerelease
          dotnet nuget push Asv.Audio.Codec.Opus.${{ env.VERSION }}.nupkg --api-key ${{ env.NUGET_TOKEN }} --skip-duplicate --source ${{ env.NUGET_SOURCE_URL }} --prerelease
          dotnet nuget push Asv.Audio.Source.Windows.${{ env.VERSION }}.nupkg --api-key ${{ env.NUGET_TOKEN }} --skip-duplicate --source ${{ env.NUGET_SOURCE_URL }} --prerelease